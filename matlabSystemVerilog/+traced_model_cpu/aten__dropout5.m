classdef aten__dropout5 < nnet.layer.Layer & nnet.layer.Formattable & ...
        nnet.layer.AutogeneratedFromPyTorch & nnet.layer.Acceleratable
    %aten__dropout5 Auto-generated custom layer
    % Auto-generated by MATLAB on 26-Jan-2025 10:15:29
    
    properties (Learnable)
        % Networks (type dlnetwork)
        
    end
    
    properties
        % Non-Trainable Parameters
        dropout_3
        dropout_4
        
        
        
    end
    
    properties (Learnable)
        % Trainable Parameters
        
    end
    
    methods
        function obj = aten__dropout5(Name, Type, InputNames, OutputNames)
            obj.Name = Name;
            obj.Type = Type;
            obj.NumInputs = 1;
            obj.NumOutputs = 1;
            obj.InputNames = InputNames;
            obj.OutputNames = OutputNames;
        end
        
        function [dropout_input_1] = predict(obj,dropout_argument1_1)
            
            %Use the input format inferred by the importer to permute the input into reverse-PyTorch dimension order
            [dropout_argument1_1, dropout_argument1_1_format] = traced_model_cpu.ops.permuteToReversePyTorch(dropout_argument1_1, '', 2);
            [dropout_argument1_1] = struct('value', dropout_argument1_1, 'rank', int64(2));
            
            [dropout_input_1] = tracedPyTorchFunction(obj,dropout_argument1_1,false,"predict");
            
            
            %Permute U-labelled output to forward PyTorch dimension ordering
            if(any(dims(dropout_input_1.value) == 'U'))
                dropout_input_1 = permute(dropout_input_1.value, fliplr(1:max(2,dropout_input_1.rank)));
            end
            
        end
        
        
        
        function [dropout_input_1] = forward(obj,dropout_argument1_1)
            
            %Use the input format inferred by the importer to permute the input into reverse-PyTorch dimension order
            [dropout_argument1_1, dropout_argument1_1_format] = traced_model_cpu.ops.permuteToReversePyTorch(dropout_argument1_1, '', 2);
            [dropout_argument1_1] = struct('value', dropout_argument1_1, 'rank', int64(2));
            
            [dropout_input_1] = tracedPyTorchFunction(obj,dropout_argument1_1,true,"forward");
            
            
            %Permute U-labelled output to forward PyTorch dimension ordering
            if(any(dims(dropout_input_1.value) == 'U'))
                dropout_input_1 = permute(dropout_input_1.value, fliplr(1:max(2,dropout_input_1.rank)));
            end
            
        end
        
        
        
        function [dropout_input_1] = tracedPyTorchFunction(obj,dropout_argument1_1,isForward,predict)
            
            [dropout_3] = traced_model_cpu.ops.makeStructForConstant(single(obj.dropout_3), int64(0), "Typed");
            [dropout_4] = traced_model_cpu.ops.makeStructForConstant(int64(obj.dropout_4), int64(0), "Typed");
            [dropout_input_1] = traced_model_cpu.ops.pyDropout(dropout_argument1_1, dropout_3, isForward);
        end
        
    end
end

